TODO:
    Генератор продаж магазина:
        0.  Вводим понятие "минимальной длительности операции на кассе", т.е., какова длительность
            самой быстрой регистрации продажи на кассе. Тогда "максимальное количество чеков" по кассе
            магазина - количество таких минимальных интервалов в течение рабочих часов магазина.
                Рабочие часы магазина:
                    [config.json, раздел: store_chain.stores.opening_hours]
                Минимальная длительность кассовой регистрации в магазинах торговой сети (одна для всех):
                    [config.json, поле:  store_chain.min_sec_per_cash_transaction] - по умолчанию 60 сек.
        1.  Для каждого магазина генерим дневное количество продаж (чеков) по каждой кассе
            этого магазина как произведение:
                < максимального количества чеков по кассе этого магазина (см.выше) >
                    на
                < рандомное число из отрезка: [0.2, 0.7] - коэффициента дневной нагрузки торговой сети
                    [config.json, раздел: store_chain.range_of_chain_daily_load] >
                    на
                < популярность магазина (в %) в настройках:
                    [config.json, раздел: store_chain.stores.ranks] >
                    на
                < рандомное число из отрезка: [0.6, 1.0] - вариативность продаж по конкретной кассе
                    [config.json, раздел: store_chain.range_of_cash_regs_daily_load] >
        2.  Далее для каждой кассы генерим продажи (см. следующий раздел).
   Генератор продаж по кассе:
        1.  Для каждой кассы исходя из количества проведенных по ней продаж (чеков),
            создаем список случайных неповторяющихся временных отметок о продаже (чеке)
            в пределах заданных часов работы магазина.
                Часы работы магазинов:
                    [config.json, раздел: store_chain.stores.opening_hours]
        2. Далее для полученных временных отметок генерим чеки (см. следующий раздел).
    Генератор чеков:
        1.  Каждая временная отметка в списке продаж по каждой кассе каждого
            магазина - один чек.
        2.  Для каждого чека генерим случайное количество позиций в чеке в диапазоне
            от 1 до примерно 20 с убывающей вероятностью (экспоненциальное распределение).
        3.  Далее для полученного количества позиций генерим строки чека
            (см. следующий раздел).
    Генератор строк чека:
        1.  doc_id - численно-буквенный идентификатор чека (длина поля - 22 символа):
                Построение: AaYYYYMMDDHHMMSS, где:
                    A - большая буква латинского алфавита по порядку, соответствующему номеру
                        магазина: магазин № 1 - буква "A", № 2 - "B" и т.д. (не более 26 магазинов)
                    a - маленькая буква латинского алфавита по порядку, соответствующему номеру
                        кассы в магазине: касса № 1 - буква "a" и т.д. (не более 26 кассовых точек)
                    YYYYMMDDHHMMSS - полная дата/время (с секундами) без разделителей
                Пример: Ab20250319133521
        2.  item - название товара (длина поля - переменная):
                Построение: <prefix><N[NNN]>, где:
                    prefix - префикс имени:
                        [задается в config.json, раздел: store_chain.goods.name_prefix]
                    N[NNN] - номер товара в соответствующем диапазоне:
                        [задается в config.json, раздел: store_chain.goods.category_capacity]
                Пример: "дом_инт_100"
        3.  category - категория товара (бытовая химия, текстиль, посуда и т.д.)
                Выбирается из списка:
                        [задается в config.json, раздел: store_chain.goods.categories]
                Пример: "домашний интерьер"
        4.  amount - количество товара в чеке:
                Рандомное число в диапазоне от 1 до примерно 20 с убывающей вероятностью (то же
                рапределение, что и для количества позиций в чеке)
        5.  price - цена одной позиции без учета скидки:
                Рандомное число в диапазон 10 до 50000 руб (округленное до десятков),
                    (попробуем применить логнормальное распределение с параметрами:
                     среднее=1500, стандартное отклонение=1500, сигма= среднее/стандартное отклонение)
        6. discount - сумма скидки на эту позицию, для простоты будем определяеть как одно из
                значений ряда: [0.0, 0.5, 1.00, 2.50, 5.00, 10.0] встречающихся с соответствующими
                вероятностями: [0.5, 0.3, 0.10, 0.07, 0.02, 0.01] для товаров не менее 500 руб.
        7. receipt_time - для удобства последующей обработки добавим временную отметку о
                моменте совершения покупки
        8. Ограничения:
            - товар в одном чеке не должен повторяться.
    Сохранение строк чеков:
        все строки чеков сохраняются в отдельные файлы сгруппированные по каждой кассе каждого магазина.
    Релевантность фейковых данных предметной области:
        С целью повышения релевантности реализации генератора продаж с моделируемой предметной областью,
        реализовано предварительное создание всей товарной номенклатуры торговой сети, товары которой
        участвуют в формировании случайных продаж (чеков). При этом применяется установка фиксированного
        seed-параметра для обеспечения повторимости параметров генерируемой товарной номенклатуры при
        каждом запуске генератора.
        Вместе с тем, для простоты, не уделено внимание моделированию более реалистичной структуры и
        статистики продаж в зависимости, например, от времени года, дня недели, выходных/праздничных дней
        или времени дня.
    Реализация генераторов:
        для повышения скорости генерации основные процессы должны быть реализованы асинхронно.