TODO:
    Генератор продаж магазина:
        0.  Принимаем за максимальное количество продаж по кассе магазина количество 2-х
            минутных периодов в течение рабочих часов магазина, где установлена эта касса.
                Рабочие часы магазина:
                    [config.json, раздел: store_chain.stores.opening_hours]
        1.  Для каждого магазина генерим дневное количество продаж (чеков) по каждой кассе
            этого магазина как произведение:
                < максимального количества чеков по кассе этого магазина >
                    на
   *             < рандомное число из отрезка: [0.2, 0.7] - коэффициента дневной нагрузки торговой сети >
                    на
                < популярность магазина - параметр в настройках>
                    на
   *             < рандомное число из отрезка: [0.5, 1.0] - вариативность по конкретной кассе >
                Популярность магазинов:
                    [config.json, раздел: store_chain.stores.ranks]
        2.  Разбиваем в случайном порядке (примерно равномерно) полученное число чеков
            на количества чеков проведенных по каждой кассе магазина.
                Количество касс в магазинах:
                    [config.json, раздел: store_chain.stores.cash_registers]
        3.  Далее для каждой кассы генерим продажи (см. следующий раздел).
   Генератор продаж по кассе:
        1.  Для каждой кассы исходя из количества проведенных по ней продаж (чеков),
            создаем список временных отметок о продаже (чеке) в пределах заданных часов
            работы магазина.
                Часы работы магазинов:
                    [задается в config.json, раздел: store_chain.stores.opening_hours]
        2. Далее для полученных временных отметок генерим чеки (см. следующий раздел).
    Генератор чеков:
        1.  Каждая временная отметка в списке продаж по каждой кассе каждого
            магазина - один чек.
        2.  Для каждого чека генерим случайное количество позиций в чеке в диапазоне
            от 1 до 15 с убывающей вероятностью.
        3.  Далее для полученного количества позиций генерим строки чека
            (см. следующий раздел).
    Генератор строк чека:
        1.  doc_id - численно-буквенный идентификатор чека (длина поля - 22 символа):
                Построение: AaYYYYMMDDHHMMSSffffff, где:
                    A - большая буква латинского алфавита по порядку, соответствующему номеру
                        магазина: магазин № 1 - буква "A", № 2 - "B" и т.д. (не более 26 магазинов)
                    a - маленькая буква латинского алфавита по порядку, соответствующему номеру
                        кассы в магазине: касса № 1 - буква "a" и т.д. (не более 26 кассовых точек)
                    YYYYMMDDHHMMSSffffff - полная дата/время (с микросекундами) без разделителей
                Пример: Ab20250319133521446886
        2.  item - название товара (длина поля - переменная):
                Построение: <prefix><N[NNN]>, где:
                    prefix - префикс имени:
                        [задается в config.json, раздел: store_chain.goods.name_prefix]
                    N[NNN] - номер товара в соответствующем диапазоне:
                        [задается в config.json, раздел: store_chain.goods.category_capacity]
                Пример: "дом_инт_100"
        3.  category - категория товара (бытовая химия, текстиль, посуда и т.д.)
                Выбирается из списка:
                        [задается в config.json, раздел: store_chain.goods.categories]
                Пример: "домашний интерьер"
        4.  amount - количество товара в чеке:
                Рандомное число в диапазоне от 1 до 50 с убывающей вероятностью
        5.  price - цена одной позиции без учета скидки:
                Рандомное число в диапазон 1.0 до 50000.0 с точностью до 2-х знаков,
                    (
                        Нужно подобрать закон распределения вероятности для более точного
                        соответствия моделируемой доменной области - торговля товарами
                        для дома широкого ассортимента
                    )
        6. discount - сумма скидки на эту позицию (может быть 0) в процентах ?
                Рандомное число из отрезка: [0.0, 0.3]
        7. Ограничения:
            - товар в одном чеке не должен повторяться.
    Сохранение строк чеков:
        для каждого магазина все строки всех чеков всех касс сохраняются в общем
        хронологическом порядке создания чека (имитируя обычную работу кассового софта
        в крупном магазине с последовательной фиксацией всех операций в единую базу)
        в отдельный файл.
    Релевантность фейковых данных предметной области:
        Для упрощения, в данном варианте при формировании чеков не предусмотрено
        более релевантное моделирование товарной номенклатуры. Например, не предусмотрен
        контроль за соответствием цены конкретному товару (исходя из выбранного алгоритма
        формирования цены позиции в чеке, для одинакового товара всегда будет присутствовать
        разная цена). А также, большая реалистичность структуры и статистики продаж
        в зависимости, например, от времени года, дня недели, выходных/праздничных дней или
        времени дня.
    Реализация генераторов:
        для повышения скорости генерации процессы генерации для каждого магазина
        должны выполняться асинхронно.